main.py:
import tkinter as tk
from tkinter import filedialog, messagebox
from bloques import agregar_bloque_texto, mover_botones_abajo
from submenu import abrir_submenu
from export_pdf import export_to_pdf  # ✅ Import correcto

root = tk.Tk()
root.title("QuicKual")

# --- Maximizar según sistema ---
window_system = root.tk.call('tk', 'windowingsystem')
if window_system == 'win32':
    root.state('zoomed')
elif window_system == 'x11':
    try:
        root.attributes('-zoomed', True)
    except tk.TclError:
        root.state('zoomed')
elif window_system == 'aqua':
    root.attributes('-fullscreen', True)

# --- Frame principal con scroll ---
main_frame = tk.Frame(root, bg="#f0f0f0")
main_frame.pack(fill="both", expand=True)

canvas = tk.Canvas(main_frame, highlightthickness=0, bd=0, bg="#f0f0f0")
scrollbar = tk.Scrollbar(main_frame, orient="vertical", command=canvas.yview)
canvas.configure(yscrollcommand=scrollbar.set)

scrollbar.pack(side="right", fill="y")
canvas.pack(side="left", fill="both", expand=True)

scrollable_frame = tk.Frame(canvas, bg="#f0f0f0")
canvas_window = canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")

def actualizar_scroll(_=None):
    canvas.update_idletasks()
    canvas.configure(scrollregion=canvas.bbox("all"))

scrollable_frame.bind("<Configure>", actualizar_scroll)
canvas.bind("<Configure>", lambda e: canvas.itemconfig(canvas_window, width=e.width))

# --- Frame de botones ---
botones_frame = tk.Frame(scrollable_frame, bg="#f0f0f0")
botones_frame.pack(side="top", pady=10)

btn_texto = tk.Button(
    botones_frame, text="Texto", font=("Arial", 14), padx=10, pady=5,
    command=lambda: agregar_bloque_texto(scrollable_frame, botones_frame, canvas)
)
btn_submenu = tk.Button(
    botones_frame, text="+", font=("Arial", 14, "bold"), padx=10, pady=5,
    command=lambda: abrir_submenu(scrollable_frame, botones_frame, canvas)
)

btn_texto.pack(side="left", padx=5)
btn_submenu.pack(side="left", padx=5)

# --- Scroll con rueda del ratón ---
def _on_mousewheel(event):
    if window_system == 'aqua':
        canvas.yview_scroll(-1 * int(event.delta), "units")
    else:
        canvas.yview_scroll(-1 * int(event.delta / 120), "units")

canvas.bind_all("<MouseWheel>", _on_mousewheel)
canvas.bind_all("<Button-4>", lambda e: canvas.yview_scroll(-1, "units"))
canvas.bind_all("<Button-5>", lambda e: canvas.yview_scroll(1, "units"))

# ---- Función para exportar a PDF ----
def exportar_pdf():
    archivo_destino = filedialog.asksaveasfilename(
        defaultextension=".pdf",
        filetypes=[("Archivos PDF", "*.pdf")],
        title="Guardar PDF como..."
    )
    if not archivo_destino:
        return

    try:
        export_to_pdf(scrollable_frame, archivo_destino, title="Mi documento QuicKual")
        messagebox.showinfo(
            "Exportar a PDF",
            f"El documento se ha exportado correctamente como:\n{archivo_destino}"
        )
    except Exception as e:
        messagebox.showerror("Error", f"Ocurrió un problema al exportar:\n{e}")

# ---- Apartado fijo inferior con botón centrado ----
bottom_frame = tk.Frame(root, bg="#f0f0f0", height=60)
bottom_frame.pack(side="bottom", fill="x")
bottom_frame.pack_propagate(False)

export_btn = tk.Button(
    bottom_frame,
    text="Exportar a PDF",
    font=("Arial", 14),
    padx=20,
    pady=6,
    command=exportar_pdf  # ✅ Llamada a la función
)
export_btn.pack(anchor="center", pady=8)

# ------------------------------------------------------------------------------------
root.mainloop()

bloques.py:
import tkinter as tk

def agregar_bloque_texto(scrollable_frame, botones_frame, canvas):
    bloque = tk.Frame(scrollable_frame, bd=3, relief="groove", bg="white")
    bloque.pack(side="top", fill="x", pady=5)

    # Evitar que el frame cambie de tamaño automáticamente
    bloque.pack_propagate(False)

    # Calcular altura = 1/4 de la ventana principal
    bloque.update_idletasks()
    ventana_altura = bloque.winfo_toplevel().winfo_height()
    if ventana_altura < 100:  # Fallback si la ventana aún no se ha dibujado
        ventana_altura = 600
    bloque.config(height=int(ventana_altura * 0.25))

    # Widget de texto
    text_widget = tk.Text(bloque, wrap="word", font=("Arial", 14), undo=True, borderwidth=0)
    text_widget.pack(fill="both", expand=True, padx=5, pady=5)

    text_widget.focus_set()

    # Actualizar canvas y scroll
    bloque.update_idletasks()
    canvas.update_idletasks()
    canvas.yview_moveto(1.0)

    mover_botones_abajo(botones_frame, canvas)


def mover_botones_abajo(botones_frame, canvas):
    botones_frame.pack_forget()
    botones_frame.pack(side="top", pady=10)
    canvas.update_idletasks()

dialogs.py:
import tkinter as tk
from tkinter import simpledialog, messagebox

# ------------------------- BLOQUE DE TEXTO -------------------------
def agregar_bloque_texto(scrollable_frame, botones_frame, canvas):
    bloque = tk.Frame(scrollable_frame, bd=3, relief="groove", bg="white")
    bloque.pack(side="top", fill="x", pady=5)

    # Evitar que el frame cambie de tamaño automáticamente
    bloque.pack_propagate(False)

    # Altura = 1/4 de la ventana principal
    bloque.update_idletasks()
    ventana_altura = bloque.winfo_toplevel().winfo_height()
    if ventana_altura < 100:
        ventana_altura = 600
    bloque.config(height=int(ventana_altura * 0.25))

    # Cuadro de texto
    text_widget = tk.Text(bloque, wrap="word", font=("Arial", 14), undo=True, borderwidth=0)
    text_widget.pack(fill="both", expand=True, padx=5, pady=5)

    text_widget.focus_set()
    bloque.update_idletasks()
    canvas.update_idletasks()
    canvas.yview_moveto(1.0)

    # Reposicionar botones al final
    botones_frame.pack_forget()
    botones_frame.pack(side="top", pady=10)
    canvas.update_idletasks()


# ------------------------- MOVER BOTONES -------------------------
def mover_botones_abajo(botones_frame, canvas):
    botones_frame.pack_forget()
    botones_frame.pack(side="top", pady=10)
    canvas.update_idletasks()

# ------------------------- SUMA -------------------------
def dibujar_tabla_suma(scrollable_frame, botones_frame, canvas):
    from tkinter import simpledialog
    a = simpledialog.askinteger("Suma", "Primer sumando:", parent=scrollable_frame)
    b = simpledialog.askinteger("Suma", "Segundo sumando:", parent=scrollable_frame)
    if a is None or b is None: return

    filas = 4
    columnas = max(len(str(a)), len(str(b)), len(str(a+b))) + 1

    tabla_frame = tk.Frame(scrollable_frame, bd=2, relief="groove", bg="white")
    tabla_frame.pack(side="top", fill="x", pady=5)

    entries = {}
    a_str, b_str = str(a), str(b)
    for i in range(filas):
        tabla_frame.grid_rowconfigure(i, weight=1)
        for j in range(columnas):
            e = tk.Entry(tabla_frame, font=("Arial", 16), justify="center")
            e.grid(row=i, column=j, sticky="nsew", padx=4, pady=4)
            entries[(i,j)] = e

    # Fila 1
    start_col_a = columnas - len(a_str)
    for j in range(columnas):
        if j>=start_col_a: entries[(1,j)].insert(0, a_str[j-start_col_a])
        entries[(1,j)].config(state="disabled")

    # Fila 2 con +
    start_col_b = columnas - len(b_str)
    for j in range(columnas):
        if j==0: entries[(2,j)].insert(0,"+")
        elif j>=start_col_b: entries[(2,j)].insert(0,b_str[j-start_col_b])
        entries[(2,j)].config(state="disabled")

    # Configuración filas/columnas
    for i in range(filas):
        tabla_frame.grid_rowconfigure(i, weight=1)
    for j in range(columnas):
        tabla_frame.grid_columnconfigure(j, weight=1)

    scrollable_frame.update_idletasks()
    canvas.update_idletasks()
    canvas.yview_moveto(1.0)
    mover_botones_abajo(botones_frame, canvas)

# ------------------------- RESTA -------------------------
def dibujar_tabla_resta(scrollable_frame, botones_frame, canvas):
    from tkinter import simpledialog
    a = simpledialog.askinteger("Resta", "Minuendo:", parent=scrollable_frame)
    b = simpledialog.askinteger("Resta", "Sustraendo:", parent=scrollable_frame)
    if a is None or b is None: return

    filas = 4
    columnas = max(len(str(a)), len(str(b)), len(str(a-b))) + 1

    tabla_frame = tk.Frame(scrollable_frame, bd=2, relief="groove", bg="white")
    tabla_frame.pack(side="top", fill="x", pady=5)

    entries = {}
    a_str, b_str = str(a), str(b)
    for i in range(filas):
        tabla_frame.grid_rowconfigure(i, weight=1)
        for j in range(columnas):
            e = tk.Entry(tabla_frame, font=("Arial",16), justify="center")
            e.grid(row=i,column=j,sticky="nsew",padx=4,pady=4)
            entries[(i,j)] = e

    # Fila 1
    start_col_a = columnas - len(a_str)
    for j in range(columnas):
        if j>=start_col_a: entries[(1,j)].insert(0, a_str[j-start_col_a])
        entries[(1,j)].config(state="disabled")

    # Fila 2 con -
    start_col_b = columnas - len(b_str)
    for j in range(columnas):
        if j==0: entries[(2,j)].insert(0,"-")
        elif j>=start_col_b: entries[(2,j)].insert(0,b_str[j-start_col_b])
        entries[(2,j)].config(state="disabled")

    # Configuración filas/columnas
    for i in range(filas):
        tabla_frame.grid_rowconfigure(i,weight=1)
    for j in range(columnas):
        tabla_frame.grid_columnconfigure(j,weight=1)

    scrollable_frame.update_idletasks()
    canvas.update_idletasks()
    canvas.yview_moveto(1.0)
    mover_botones_abajo(botones_frame, canvas)

# ------------------------- MULTIPLICACIÓN -------------------------
# ------------------------- MULTIPLICACIÓN -------------------------
def dibujar_tabla_multiplicacion(scrollable_frame, botones_frame, canvas, font_size=16, padding=4):
    from tkinter import simpledialog, messagebox

    # --- Dialogo para pedir los números ---
    class MultiplicacionDialog(simpledialog.Dialog):
        def body(self, master):
            tk.Label(master, text="Introduce el 1º multiplicando:").grid(row=0, column=0, sticky="w")
            tk.Label(master, text="Introduce el 2º multiplicando:").grid(row=1, column=0, sticky="w")

            self.entry_a = tk.Entry(master)
            self.entry_b = tk.Entry(master)
            self.entry_a.grid(row=0, column=1, padx=5, pady=5)
            self.entry_b.grid(row=1, column=1, padx=5, pady=5)

            return self.entry_a

        def apply(self):
            try:
                self.a = int(self.entry_a.get())
                self.b = int(self.entry_b.get())
            except ValueError:
                self.a = None
                self.b = None

    # --- Crear diálogo y obtener los valores ---
    root_aux = tk.Tk()
    root_aux.withdraw()
    dialog = MultiplicacionDialog(root_aux, title="Introduce los números")
    root_aux.destroy()

    if dialog.a is None or dialog.b is None:
        return

    a, b = dialog.a, dialog.b

    # --- Calcular filas y columnas ---
    def calcular_filas_columnas(a, b):
        filas = 4
        if len(str(b)) > 1:
            filas += len(str(b))
        columnas = len(str(a * b)) + 1
        return filas, columnas

    filas, columnas = calcular_filas_columnas(a, b)

    # --- Crear bloque de tabla ---
    bloque = tk.Frame(scrollable_frame, bd=3, relief="groove", bg="white")
    bloque.pack(side="top", fill="x", pady=5)

    entries = {}
    a_str = str(a)
    b_str = str(b)

    # --- Crear celdas ---
    for i in range(filas):
        bloque.grid_rowconfigure(i, weight=1)
        for j in range(columnas):
            bloque.grid_columnconfigure(j, weight=1)
            e = tk.Entry(bloque, font=("Arial", font_size), justify="center", bd=2, relief="groove")
            e.grid(row=i, column=j, sticky="nsew", padx=padding, pady=padding)
            entries[(i, j)] = e

    # --- Fila 1: primer multiplicando (bloqueado) ---
    start_col_a = columnas - len(a_str)
    for j in range(columnas):
        if j >= start_col_a:
            entries[(1, j)].insert(0, a_str[j - start_col_a])
        entries[(1, j)].config(state="disabled")

    # --- Fila 2: multiplicador con X (bloqueado) ---
    start_col_b = columnas - len(b_str)
    for j in range(columnas):
        if j == 0:
            entries[(2, j)].insert(0, "X")
        elif j >= start_col_b:
            entries[(2, j)].insert(0, b_str[j - start_col_b])
        entries[(2, j)].config(state="disabled")

    # --- Símbolo + en la penúltima fila si b tiene más de un dígito ---
    if len(str(b)) > 1:
        entries[(filas - 2, 0)].insert(0, "+")
        entries[(filas - 2, 0)].config(state="disabled")

    # --- Actualizar scroll y mover botones ---
    bloque.update_idletasks()
    canvas.update_idletasks()
    canvas.yview_moveto(1.0)

    botones_frame.pack_forget()
    botones_frame.pack(side="top", pady=10)

# ------------------------- DIVISIÓN -------------------------
def dibujar_tabla_division(scrollable_frame, botones_frame, canvas, font_size=16, padding=4):
    from tkinter import simpledialog, messagebox

    class DivisionDialog(simpledialog.Dialog):
        def body(self, master):
            tk.Label(master, text="Introduce el dividendo:", font=("Arial", font_size)).grid(row=0, column=0, sticky="w", pady=5)
            tk.Label(master, text="Introduce el divisor:", font=("Arial", font_size)).grid(row=1, column=0, sticky="w", pady=5)

            self.entry_dividendo = tk.Entry(master, font=("Arial", font_size))
            self.entry_divisor = tk.Entry(master, font=("Arial", font_size))
            self.entry_dividendo.grid(row=0, column=1, padx=5, pady=5)
            self.entry_divisor.grid(row=1, column=1, padx=5, pady=5)
            return self.entry_dividendo

        def apply(self):
            try:
                self.dividendo = int(self.entry_dividendo.get())
                self.divisor = int(self.entry_divisor.get())
            except ValueError:
                self.dividendo = None
                self.divisor = None

    root_aux = tk.Tk()
    root_aux.withdraw()
    dialog = DivisionDialog(root_aux, title="Introduce los números")
    root_aux.destroy()
    if dialog.dividendo is None or dialog.divisor is None:
        return

    dividendo = dialog.dividendo
    divisor = dialog.divisor

    n = len(str(dividendo))
    m = len(str(divisor))
    primeros_m = int(str(dividendo)[:m])
    if primeros_m >= divisor:
        filas = (n - m + 1) + 1
    else:
        filas = (n - m) + 1

    bloque = tk.Frame(scrollable_frame, bd=3, relief="groove", bg="white")
    bloque.pack(side="top", fill="x", pady=5)

    entries = {}
    columnas = 2
    for i in range(filas):
        bloque.grid_rowconfigure(i, weight=1)
        for j in range(columnas):
            bloque.grid_columnconfigure(j, weight=1)
            e = tk.Entry(bloque, font=("Arial", font_size), justify="center", bd=2, relief="groove")
            e.grid(row=i, column=j, sticky="nsew", padx=padding, pady=padding)
            entries[(i,j)] = e

    entries[(0,0)].insert(0, str(dividendo))
    entries[(0,0)].config(state="disabled", disabledbackground="#f0f0f0", disabledforeground="black")
    entries[(0,1)].insert(0, str(divisor))
    entries[(0,1)].config(state="disabled", disabledbackground="#f0f0f0", disabledforeground="black")

    bloque.update_idletasks()
    canvas.update_idletasks()
    canvas.yview_moveto(1.0)
    mover_botones_abajo(botones_frame, canvas)
    
# ------------------------- FACTORIAL (botón "|") -------------------------
def contar_filas(numero: int) -> int:
    if numero < 1: return 1
    n = numero
    count = 0
    d = 2
    while n>1:
        if n%d==0:
            n//=d
            count+=1
        else:
            d+=1
    return count+1

def dibujar_tabla_factorial(scrollable_frame, botones_frame, canvas, font_size=16, padding=4):
    numero = simpledialog.askinteger("Recomposición factorial", "Introduce un número:", parent=scrollable_frame)
    if numero is None: return

    bloque = tk.Frame(scrollable_frame, bd=3, relief="groove", bg="white")
    bloque.pack(side="top", fill="x", pady=5)

    filas = contar_filas(numero)
    entries = {}
    for i in range(filas):
        bloque.grid_rowconfigure(i, weight=1)
        for j in range(2):
            bloque.grid_columnconfigure(j, weight=1)
            e = tk.Entry(bloque, font=("Arial", font_size), justify="center", bd=2, relief="groove")
            e.grid(row=i, column=j, sticky="nsew", padx=padding, pady=padding)
            entries[(i,j)] = e
    entries[(0,0)].insert(0,str(numero))
    entries[(0,0)].config(state="disabled")

    bloque.update_idletasks()
    canvas.update_idletasks()
    canvas.yview_moveto(1.0)
    mover_botones_abajo(botones_frame, canvas)

# ------------------------- RAÍZ (botón "√") -------------------------
class RaizDialog(simpledialog.Dialog):
    def body(self, master):
        tk.Label(master, text="Índice de la raíz:", font=("Arial",14)).grid(row=0,column=0,sticky="w", pady=5)
        tk.Label(master, text="Radicando:", font=("Arial",14)).grid(row=1,column=0,sticky="w", pady=5)
        self.entry_indice = tk.Entry(master,font=("Arial",14))
        self.entry_radicando = tk.Entry(master,font=("Arial",14))
        self.entry_indice.grid(row=0,column=1,padx=10,pady=5)
        self.entry_radicando.grid(row=1,column=1,padx=10,pady=5)
        return self.entry_indice
    def apply(self):
        try:
            self.indice = int(self.entry_indice.get())
            self.radicando = int(self.entry_radicando.get())
        except ValueError:
            self.indice=None
            self.radicando=None

def dibujar_tabla_raiz(scrollable_frame, botones_frame, canvas, font_size=16, padding=4):
    root_aux = tk.Tk()
    root_aux.withdraw()
    dialog = RaizDialog(root_aux, title="Datos de la raíz")
    root_aux.destroy()
    if not dialog.indice or not dialog.radicando: return

    indice = dialog.indice
    radicando = dialog.radicando

    bloque = tk.Frame(scrollable_frame, bd=3, relief="groove", bg="white")
    bloque.pack(side="top", fill="x", pady=5)

    filas = contar_filas(radicando)
    entries = {}
    for i in range(filas):
        bloque.grid_rowconfigure(i, weight=1)
        for j in range(3):
            bloque.grid_columnconfigure(j, weight=1)
            if (i,j)==(0,0):
                frame_super = tk.Frame(bloque, bg="#e0e0e0")
                frame_super.grid(row=i, column=j, sticky="nsew", padx=padding, pady=padding)
                label_super = tk.Label(frame_super, text=str(indice), font=("Arial", font_size), bg="#e0e0e0")
                label_super.place(relx=0.9, rely=0.2, anchor="ne")
                entries[(i,j)] = frame_super
            else:
                e = tk.Entry(bloque, font=("Arial", font_size), justify="center", bd=2, relief="groove")
                e.grid(row=i, column=j, sticky="nsew", padx=padding, pady=padding)
                entries[(i,j)] = e

    for i in range(1, filas):
        entries[(i,0)].config(state="disabled", disabledbackground="#e0e0e0", disabledforeground="black")

    entries[(0,1)].insert(0,str(radicando))
    entries[(0,1)].config(state="disabled", disabledbackground="#f0f0f0", disabledforeground="black")

    bloque.update_idletasks()
    canvas.update_idletasks()
    canvas.yview_moveto(1.0)
    mover_botones_abajo(botones_frame, canvas)

# ------------------------- CÓDIGO BINARIO (botón "01/10") -------------------------
def dibujar_tabla_binaria(scrollable_frame, botones_frame, canvas, font_size=16, padding=4):
    numero_str = simpledialog.askstring("Código binario", "Introduce un número:", parent=scrollable_frame)
    if not numero_str: return
    try:
        numero = int(numero_str)
    except ValueError:
        messagebox.showerror("Error","Debes introducir un número válido.")
        return

    def calcular_filas(valor: int) -> int:
        filas = 1
        while valor > 1:
            valor //= 2
            filas +=1
        return filas

    filas = calcular_filas(numero)
    columnas = filas

    bloque = tk.Frame(scrollable_frame, bd=3, relief="groove", bg="white")
    bloque.pack(side="top", fill="x", pady=5)

    entries = {}
    fixed = {}
    if filas>0 and columnas>0: fixed[(0,0)] = numero_str
    if columnas>1: fixed[(0,1)] = "2"
    for i in range(1, filas):
        col = i+1
        if col < columnas: fixed[(i,col)] = "2"

    for i in range(filas):
        bloque.grid_rowconfigure(i, weight=1)
        for j in range(columnas):
            bloque.grid_columnconfigure(j, weight=1)
            e = tk.Entry(bloque, font=("Arial", font_size), justify="center", bd=2, relief="groove")
            e.grid(row=i, column=j, sticky="nsew", padx=padding, pady=padding)
            entries[(i,j)] = e
            if (i,j) in fixed:
                e.insert(0,fixed[(i,j)])
                e.config(state="disabled")

    bloque.update_idletasks()
    canvas.update_idletasks()
    canvas.yview_moveto(1.0)
    mover_botones_abajo(botones_frame, canvas)

export_pdf.py:
import tkinter as tk
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.units import mm
from typing import List, Dict, Any


def extract_document_structure(scrollable_frame: tk.Frame) -> List[Dict[str, Any]]:
    blocks = []
    for child in scrollable_frame.winfo_children():
        children = child.winfo_children()
        if not children:
            continue

        # Ignorar frames que solo contienen botones
        if any(isinstance(w, tk.Button) for w in children):
            continue

        # Bloques de texto
        text_widgets = [w for w in children if isinstance(w, tk.Text)]
        if text_widgets:
            text_widget = text_widgets[0]
            text = text_widget.get("1.0", "end-1c")
            blocks.append({'type': 'text', 'content': text})
            continue

        # Bloques de tabla
        cell_widgets = []
        max_row = -1
        max_col = -1
        for w in children:
            try:
                gi = w.grid_info()
            except Exception:
                gi = {}
            if gi:
                try:
                    r = int(gi.get('row', 0))
                    c = int(gi.get('column', 0))
                except Exception:
                    r, c = 0, 0
                cell_widgets.append((r, c, w))
                if r > max_row:
                    max_row = r
                if c > max_col:
                    max_col = c

        if cell_widgets:
            rows = max_row + 1
            cols = max_col + 1
            matrix = [['' for _ in range(cols)] for _ in range(rows)]
            is_division = False
            is_suma = False
            is_resta = False

            # Detectar división: tabla de 2 columnas y fila 0 con números
            if cols == 2 and len(children) > 2:
                c0_text = ''
                c1_text = ''
                for r, c, w in cell_widgets:
                    try:
                        txt = w.get() if isinstance(w, tk.Entry) else ''
                    except:
                        txt = ''
                    if r == 0 and c == 0:
                        c0_text = txt
                    if r == 0 and c == 1:
                        c1_text = txt
                if c0_text.isdigit() and c1_text.isdigit():
                    is_division = True

            # Detectar suma / resta
            for r, c, w in cell_widgets:
                try:
                    txt = ''
                    if isinstance(w, tk.Entry):
                        txt = w.get()
                    elif isinstance(w, tk.Label):
                        txt = w.cget('text')
                    else:
                        for sub in w.winfo_children():
                            if isinstance(sub, tk.Label):
                                txt += sub.cget('text')
                            elif isinstance(sub, tk.Entry):
                                try:
                                    txt += sub.get()
                                except:
                                    pass
                            elif isinstance(sub, tk.Text):
                                try:
                                    txt += sub.get("1.0", "end-1c")
                                except:
                                    pass
                    matrix[r][c] = txt
                    if txt.strip().startswith('+') and r == 2:
                        is_suma = True
                    if txt.strip().startswith('-') and r == 2:
                        is_resta = True
                except:
                    matrix[r][c] = ''

            blocks.append({
                'type': 'table',
                'content': matrix,
                'division': is_division,
                'suma': is_suma,
                'resta': is_resta
            })
            continue

    return blocks


def export_to_pdf(scrollable_frame: tk.Frame, output_path: str = "document.pdf", title: str = None,
                  page_size=letter):
    blocks = extract_document_structure(scrollable_frame)

    doc = SimpleDocTemplate(
        output_path,
        pagesize=page_size,
        rightMargin=20 * mm,
        leftMargin=20 * mm,
        topMargin=20 * mm,
        bottomMargin=20 * mm,
    )

    styles = getSampleStyleSheet()
    normal = styles["Normal"]
    normal.fontName = "Helvetica"
    normal.fontSize = 12
    normal.leading = 14

    story = []

    if title:
        title_style = styles.get("Title", normal)
        story.append(Paragraph(title, title_style))
        story.append(Spacer(1, 8))

    for block in blocks:
        if block['type'] == 'text':
            text = block['content'].strip()
            if not text:
                continue
            para = Paragraph(text.replace('\n', '<br/>'), normal)
            story.append(para)
            story.append(Spacer(1, 10))

        elif block['type'] == 'table':
            data = block['content']
            if not data:
                continue

            is_division = block.get('division', False)
            is_suma = block.get('suma', False)
            is_resta = block.get('resta', False)
            is_multiplicacion = any('X' in row for row in data)

            table_data = [[("" if cell is None else str(cell)) for cell in row] for row in data]

            usable_width = page_size[0] - 40 * mm
            num_cols = len(table_data[0])

            # --- División (50/50, barra vertical SOLO fila 0, línea corta SOLO bajo divisor) ---
            if is_division:
                num_rows = len(table_data)
                half_width = usable_width / 2.0
                col_widths = [half_width, half_width]

                table = Table(table_data, colWidths=col_widths, hAlign='CENTER')

                # SOLO las líneas negras que quieres (sin GRID)
                table.setStyle(TableStyle([
                    # Asegurar que no haya caja externa visible
                    ('BOX', (0, 0), (-1, -1), 0, colors.white),

                    # Barra vertical a la derecha de la celda (0,0) — SOLO fila 0
                    ('LINEAFTER', (0, 0), (0, 0), 1.2, colors.black),

                    # Línea corta bajo la celda (1,0) — SOLO fila 0
                    ('LINEBELOW', (1, 0), (1, 0), 1.2, colors.black),

                    # Espaciado y alineación (mantener para que columnas tengan la misma altura visual)
                    ('LEFTPADDING', (0, 0), (-1, -1), 6),
                    ('RIGHTPADDING', (0, 0), (-1, -1), 6),
                    ('TOPPADDING', (0, 0), (-1, -1), 5),
                    ('BOTTOMPADDING', (0, 0), (-1, -1), 5),

                    ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
                    ('FONTSIZE', (0, 0), (-1, -1), 11),
                ]))

            # --- Sumas y restas ---
            elif is_suma or is_resta:
                table = Table(table_data, colWidths=[usable_width / num_cols] * num_cols, hAlign='CENTER')
                table.setStyle(TableStyle([
                    ('BOX', (0, 0), (-1, -1), 0, colors.white),
                    ('LINEABOVE', (0, -1), (-1, -1), 1, colors.black),
                    ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
                    ('FONTSIZE', (0, 0), (-1, -1), 11),
                    ('BOTTOMPADDING', (0, 0), (-1, -1), 5),
                    ('TOPPADDING', (0, 0), (-1, -1), 5),
                ]))

            # --- Multiplicación ---
            elif is_multiplicacion:
                num_rows = len(table_data)
                table = Table(table_data, colWidths=[usable_width / num_cols] * num_cols, hAlign='CENTER')
                table.setStyle(TableStyle([
                    ('BOX', (0, 0), (-1, -1), 0, colors.white),
                    ('LINEBELOW', (0, 2), (-1, 2), 1, colors.black),
                    ('LINEABOVE', (0, num_rows - 1), (-1, num_rows - 1), 1, colors.black),
                    ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
                    ('FONTSIZE', (0, 0), (-1, -1), 11),
                    ('BOTTOMPADDING', (0, 0), (-1, -1), 5),
                    ('TOPPADDING', (0, 0), (-1, -1), 5),
                ]))

            # --- Tablas normales ---
            else:
                table = Table(table_data, colWidths=[usable_width / num_cols] * num_cols, hAlign='CENTER')
                table.setStyle(TableStyle([
                    ('GRID', (0, 0), (-1, -1), 0.6, colors.black),
                    ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
                    ('FONTSIZE', (0, 0), (-1, -1), 11),
                    ('BOTTOMPADDING', (0, 0), (-1, -1), 5),
                    ('TOPPADDING', (0, 0), (-1, -1), 5),
                    ('WORDWRAP', (0, 0), (-1, -1), 'CJK'),
                ]))

            story.append(table)
            story.append(Spacer(1, 10))

    doc.build(story)

submenu.py:
import tkinter as tk
from dialogs import (
    dibujar_tabla_suma, dibujar_tabla_resta,
    dibujar_tabla_multiplicacion, dibujar_tabla_division,
    dibujar_tabla_factorial, dibujar_tabla_raiz,
    dibujar_tabla_binaria
)

def abrir_submenu(scrollable_frame, botones_frame, canvas):
    popup = tk.Toplevel(scrollable_frame)
    popup.title("QuicKual - Operaciones")
    popup.transient(scrollable_frame)
    popup.grab_set()

    mid_font = ("Arial", 18, "bold")
    small_font = ("Arial", 12, "bold")

    # Botones principales
    for i, simbolo in enumerate(['+','−','X','÷']):
        btn = tk.Button(popup, text=simbolo, font=("Arial",24,"bold"), width=5, height=2,
                        command=lambda s=simbolo: accion_operacion(s, scrollable_frame, botones_frame, canvas, popup))
        btn.grid(row=0, column=i, padx=10, pady=10)

    # Botones adicionales
    for i, simbolo in enumerate(['|','√','01\n10']):
        btn = tk.Button(popup, text=simbolo, font=mid_font, width=5, height=2,
                        command=lambda s=simbolo: accion_operacion(s, scrollable_frame, botones_frame, canvas, popup))
        btn.grid(row=1, column=i, padx=10, pady=10)

def accion_operacion(simbolo, scrollable_frame, botones_frame, canvas, popup):
    popup.destroy()
    if simbolo=='+': dibujar_tabla_suma(scrollable_frame, botones_frame, canvas)
    elif simbolo=='−': dibujar_tabla_resta(scrollable_frame, botones_frame, canvas)
    elif simbolo=='X': dibujar_tabla_multiplicacion(scrollable_frame, botones_frame, canvas)
    elif simbolo=='÷': dibujar_tabla_division(scrollable_frame, botones_frame, canvas)
    elif simbolo=='|': dibujar_tabla_factorial(scrollable_frame, botones_frame, canvas)
    elif simbolo=='√': dibujar_tabla_raiz(scrollable_frame, botones_frame, canvas)
    elif simbolo=='01\n10': dibujar_tabla_binaria(scrollable_frame, botones_frame, canvas)
